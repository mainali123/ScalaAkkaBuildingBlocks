[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\diwas\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\diwas\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.4 (Oracle Corporation Java 20.0.1)
[debug]       Load.loadUnit: plugins took 79.1986ms
[debug]       Load.loadUnit: defsScala took 0.2892ms
[debug] [Loading] Scanning directory C:\Users\diwas\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\diwas\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.3857 ms
[debug]           Load.resolveProject(global-plugins) took 63.1366ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\diwas\.sbt\1.0\plugins, plugins: List(<none>))) took 101.4811ms
[debug] [Loading] Done in C:\Users\diwas\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 127.2856ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.229ms
[debug]     Load.loadUnit(file:/C:/Users/diwas/.sbt/1.0/plugins/, ...) took 216.0868ms
[debug]   Load.apply: load took 406.9655ms
[debug]   Load.apply: resolveProjects took 4.3652ms
[debug]   Load.apply: finalTransforms took 51.6025ms
[debug]   Load.apply: config.delegates took 7.4171ms
[debug]   Load.apply: Def.make(settings)... took 342.3188ms
[debug]   Load.apply: structureIndex took 94.1609ms
[debug]   Load.apply: mkStreams took 2.0839ms
[info] loading global plugins from C:\Users\diwas\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1915.3569ms
[debug]           Load.loadUnit: plugins took 13.7876ms
[debug]           Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory E:\SCALA\ScalaAkkaBuildingBlocks\project
[debug]             Load.loadUnit: mkEval took 4.5582ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\SCALA\ScalaAkkaBuildingBlocks\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.2299 ms
[info] loading settings for project scalaakkabuildingblocks-build from idea.sbt ...
[debug]               Load.resolveProject(scalaakkabuildingblocks-build) took 2.0552ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalaakkabuildingblocks-build, base: E:\SCALA\ScalaAkkaBuildingBlocks\project, plugins: List(<none>))) took 3.7126ms
[debug] [Loading] Done in E:\SCALA\ScalaAkkaBuildingBlocks\project, returning: (scalaakkabuildingblocks-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1657.1667ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.7786ms
[debug]         Load.loadUnit(file:/E:/SCALA/ScalaAkkaBuildingBlocks/project/, ...) took 1674.2493ms
[debug]       Load.apply: load took 1675.1651ms
[debug]       Load.apply: resolveProjects took 0.1962ms
[debug]       Load.apply: finalTransforms took 5.868ms
[debug]       Load.apply: config.delegates took 0.3198ms
[debug]       Load.apply: Def.make(settings)... took 45.6366ms
[debug]       Load.apply: structureIndex took 21.608ms
[debug]       Load.apply: mkStreams took 0.0031ms
[info] loading project definition from E:\SCALA\ScalaAkkaBuildingBlocks\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5845.0081ms
[debug]     Load.loadUnit: defsScala took 0.0054ms
[debug] [Loading] Scanning directory E:\SCALA\ScalaAkkaBuildingBlocks
[debug]       Load.loadUnit: mkEval took 0.5239ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.3599 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 25.8092ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: E:\SCALA\ScalaAkkaBuildingBlocks, plugins: List(<none>))) took 28.5501ms
[debug] [Loading] Done in E:\SCALA\ScalaAkkaBuildingBlocks, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1216.7805ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.6176ms
[debug]   Load.loadUnit(file:/E:/SCALA/ScalaAkkaBuildingBlocks/, ...) took 7070.1566ms
[debug] Load.apply: load took 7071.2595ms
[debug] Load.apply: resolveProjects took 0.1077ms
[debug] Load.apply: finalTransforms took 18.1192ms
[debug] Load.apply: config.delegates took 0.2259ms
[debug] Load.apply: Def.make(settings)... took 39.3759ms
[debug] Load.apply: structureIndex took 16.4495ms
[debug] Load.apply: mkStreams took 0.0036ms
[info] set current project to ScalaAkkaBuildingBlocks (in build file:/E:/SCALA/ScalaAkkaBuildingBlocks/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53312 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53312, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ScalaAkkaBuildingBlocks (in build file:/E:/SCALA/ScalaAkkaBuildingBlocks/)
[debug] > Exec(idea-shell, None, None)
